// <auto-generated />
using System;
using ECFPerformance.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ECFPerformance.Infrastructure.Migrations
{
    [DbContext(typeof(EcfDbContext))]
    partial class EcfDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ConnectingRodEngineType", b =>
                {
                    b.Property<int>("ConnectingRodsId")
                        .HasColumnType("int");

                    b.Property<int>("EngineTypesId")
                        .HasColumnType("int");

                    b.HasKey("ConnectingRodsId", "EngineTypesId");

                    b.HasIndex("EngineTypesId");

                    b.ToTable("ConnectingRodEngineType");
                });

            modelBuilder.Entity("ConnectingRodProjectCar", b =>
                {
                    b.Property<int>("ConnectingRodsId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectCarsId")
                        .HasColumnType("int");

                    b.HasKey("ConnectingRodsId", "ProjectCarsId");

                    b.HasIndex("ProjectCarsId");

                    b.ToTable("ConnectingRodProjectCar");
                });

            modelBuilder.Entity("ECFPerformance.Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8a73fc76-579a-47bd-8852-52d4509311a9"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0fe1b535-5004-4474-8275-a06dea4b1378",
                            Email = "ecfperformance@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Alex",
                            LastName = "Gavrilov",
                            LockoutEnabled = false,
                            NormalizedEmail = "ecfperformance@gmail.com",
                            NormalizedUserName = "ecfperformance@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEO1c9Wtq6A4/oXUdD4myNp7R8cW9E6pWUVuSzwdN3wz+HR6O+M/F9+oPrXCpjYCIEw==",
                            PhoneNumber = "+3594567891",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5b99cafb-fcaa-4778-bab6-5ee73669904e",
                            TwoFactorEnabled = false,
                            UserName = "ecfperformance@gmail.com"
                        });
                });

            modelBuilder.Entity("ECFPerformance.Infrastructure.Data.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "Engine"
                        },
                        new
                        {
                            Id = 2,
                            CategoryName = "Chassis"
                        },
                        new
                        {
                            Id = 3,
                            CategoryName = "Suspension"
                        },
                        new
                        {
                            Id = 4,
                            CategoryName = "Exhaust"
                        });
                });

            modelBuilder.Entity("ECFPerformance.Infrastructure.Data.Models.Engine.ConnectingRod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BeamTypeId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<string>("MainImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PistonBoltDiameter")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BeamTypeId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ConnectingRods");
                });

            modelBuilder.Entity("ECFPerformance.Infrastructure.Data.Models.Engine.ConnectingRodBeamType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ConnectingRodBeam")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ConnectingRodBeamType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConnectingRodBeam = 0
                        },
                        new
                        {
                            Id = 2,
                            ConnectingRodBeam = 1
                        });
                });

            modelBuilder.Entity("ECFPerformance.Infrastructure.Data.Models.Engine.EngineType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("EngineCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("EngineTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EngineCode = 0
                        },
                        new
                        {
                            Id = 2,
                            EngineCode = 1
                        },
                        new
                        {
                            Id = 3,
                            EngineCode = 4
                        },
                        new
                        {
                            Id = 4,
                            EngineCode = 5
                        },
                        new
                        {
                            Id = 5,
                            EngineCode = 2
                        },
                        new
                        {
                            Id = 6,
                            EngineCode = 3
                        });
                });

            modelBuilder.Entity("ECFPerformance.Infrastructure.Data.Models.Engine.Turbo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("MainImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("ScrollTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ScrollTypeId");

                    b.ToTable("Turbos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            MainImage = "https://m.media-amazon.com/images/I/612l0wYluUL._AC_SX522_.jpg",
                            Make = "MaxPeedingRods",
                            Name = "GT30",
                            Price = 130.00m,
                            Quantity = 3,
                            ScrollTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            MainImage = "https://s19529.pcdn.co/wp-content/uploads/2021/02/Screen-Shot-2021-02-22-at-10.05.38-AM.png",
                            Make = "MaxPeedingRods",
                            Name = "GT35",
                            Price = 230.00m,
                            Quantity = 3,
                            ScrollTypeId = 1
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            MainImage = "https://th.bing.com/th/id/OIP.z3vjnJxtodUyIYBQigac8gHaGw?pid=ImgDet&rs=1",
                            Make = "Holset",
                            Name = "HX40",
                            Price = 500.00m,
                            Quantity = 3,
                            ScrollTypeId = 2
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            MainImage = "https://th.bing.com/th/id/R.145fdefb10871f3b499c8e9bbc1ff9c8?rik=w4kn89cj4XnJlw&pid=ImgRaw&r=0",
                            Make = "Holset",
                            Name = "HX35",
                            Price = 450.00m,
                            Quantity = 3,
                            ScrollTypeId = 2
                        });
                });

            modelBuilder.Entity("ECFPerformance.Infrastructure.Data.Models.Engine.TurboScrollType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ScrollType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ScrollTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ScrollType = 1
                        },
                        new
                        {
                            Id = 2,
                            ScrollType = 0
                        });
                });

            modelBuilder.Entity("ECFPerformance.Infrastructure.Data.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,4)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ECFPerformance.Infrastructure.Data.Models.Projects.ProjectCar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProjectCars");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Engine: \n - M50B28 stroker \n - ConnectingRods - Forged MaxPeedingRods \n - Pistons - From M40B18 Engine \n - Turbo - GT35 \n - HorsePower - ~ 400 \nChassis: \n - E36 Coupe \n - Angle Kit - WiseFab Replica",
                            MainImage = "/imgs/valkata.jpg",
                            Name = "E36 Coupe M50B28 Turbo"
                        });
                });

            modelBuilder.Entity("ECFPerformance.Infrastructure.Data.Models.ShoppingCart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ShoppingCarts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProjectCarTurbo", b =>
                {
                    b.Property<int>("ProjectCarsId")
                        .HasColumnType("int");

                    b.Property<int>("TurbosId")
                        .HasColumnType("int");

                    b.HasKey("ProjectCarsId", "TurbosId");

                    b.HasIndex("TurbosId");

                    b.ToTable("ProjectCarTurbo");
                });

            modelBuilder.Entity("ShoppingCartTurbo", b =>
                {
                    b.Property<Guid>("ShoppingCartsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TurbosId")
                        .HasColumnType("int");

                    b.HasKey("ShoppingCartsId", "TurbosId");

                    b.HasIndex("TurbosId");

                    b.ToTable("ShoppingCartTurbo");
                });

            modelBuilder.Entity("ConnectingRodEngineType", b =>
                {
                    b.HasOne("ECFPerformance.Infrastructure.Data.Models.Engine.ConnectingRod", null)
                        .WithMany()
                        .HasForeignKey("ConnectingRodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECFPerformance.Infrastructure.Data.Models.Engine.EngineType", null)
                        .WithMany()
                        .HasForeignKey("EngineTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConnectingRodProjectCar", b =>
                {
                    b.HasOne("ECFPerformance.Infrastructure.Data.Models.Engine.ConnectingRod", null)
                        .WithMany()
                        .HasForeignKey("ConnectingRodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECFPerformance.Infrastructure.Data.Models.Projects.ProjectCar", null)
                        .WithMany()
                        .HasForeignKey("ProjectCarsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ECFPerformance.Infrastructure.Data.Models.Engine.ConnectingRod", b =>
                {
                    b.HasOne("ECFPerformance.Infrastructure.Data.Models.Engine.ConnectingRodBeamType", "BeamType")
                        .WithMany("ConnectingRods")
                        .HasForeignKey("BeamTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECFPerformance.Infrastructure.Data.Models.Category", "Category")
                        .WithMany("ConnectingRods")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BeamType");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ECFPerformance.Infrastructure.Data.Models.Engine.Turbo", b =>
                {
                    b.HasOne("ECFPerformance.Infrastructure.Data.Models.Category", "Category")
                        .WithMany("Turbos")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECFPerformance.Infrastructure.Data.Models.Engine.TurboScrollType", "ScrollType")
                        .WithMany("Turbos")
                        .HasForeignKey("ScrollTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("ScrollType");
                });

            modelBuilder.Entity("ECFPerformance.Infrastructure.Data.Models.Order", b =>
                {
                    b.HasOne("ECFPerformance.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ECFPerformance.Infrastructure.Data.Models.ShoppingCart", b =>
                {
                    b.HasOne("ECFPerformance.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("ECFPerformance.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("ECFPerformance.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECFPerformance.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("ECFPerformance.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectCarTurbo", b =>
                {
                    b.HasOne("ECFPerformance.Infrastructure.Data.Models.Projects.ProjectCar", null)
                        .WithMany()
                        .HasForeignKey("ProjectCarsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECFPerformance.Infrastructure.Data.Models.Engine.Turbo", null)
                        .WithMany()
                        .HasForeignKey("TurbosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ShoppingCartTurbo", b =>
                {
                    b.HasOne("ECFPerformance.Infrastructure.Data.Models.ShoppingCart", null)
                        .WithMany()
                        .HasForeignKey("ShoppingCartsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECFPerformance.Infrastructure.Data.Models.Engine.Turbo", null)
                        .WithMany()
                        .HasForeignKey("TurbosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ECFPerformance.Infrastructure.Data.Models.Category", b =>
                {
                    b.Navigation("ConnectingRods");

                    b.Navigation("Turbos");
                });

            modelBuilder.Entity("ECFPerformance.Infrastructure.Data.Models.Engine.ConnectingRodBeamType", b =>
                {
                    b.Navigation("ConnectingRods");
                });

            modelBuilder.Entity("ECFPerformance.Infrastructure.Data.Models.Engine.TurboScrollType", b =>
                {
                    b.Navigation("Turbos");
                });
#pragma warning restore 612, 618
        }
    }
}
